{"version":3,"file":"content.js","mappings":";;;;;AAAA,WAAW,2BAA2B;AACtC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA,0DAA0D;AAC1D;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uD","sources":["webpack://webpack-demo/./scripts/content.js"],"sourcesContent":["// const { Configuration, OpenAIApi } = require(\"openai\");\r\n// let openaiClient;\r\n// openaiClient = new OpenAIApi(\r\n//     new Configuration({\r\n//       apiKey: \"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\",\r\n//     }),\r\n// );\r\nconst requestOptions = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + String(\"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\")\r\n    },\r\n    body: JSON.stringify({\r\n      'prompt': 'who are you',\r\n      'temperature': 0.1,\r\n      'max_tokens': 20,\r\n      'top_p': 1,\r\n      'frequency_penalty': 0,\r\n      'presence_penalty': 0.5,\r\n      'stop': [\"\\\"\\\"\\\"\"],\r\n    })\r\n  };\r\n  fetch('https://api.openai.com/v1/engines/code-davinci-001/completions', requestOptions)\r\n      .then(response => {\r\n            //response.json()\r\n            console.log(response.json())\r\n        })\r\n      .then(data => {\r\n            console.log(data)\r\n        }).catch(err => {\r\n            console.log(\"Ran out of tokens for today! Try tomorrow!\");\r\n        });\r\n\r\n\r\n\r\n// const completion = async()=>{ \r\n//     console.log(\"yes\")\r\n//     return await openaiClient.createCompletion({\r\n//         model: 'text-davinci-003',\r\n//         prompt:\r\n//         // 2. we explain exactly what we want (continue writing the email) \r\n//         // and provide context (the current email content)\r\n//         'Continue writing the following email:\\n\"' + \"hello, I am john\" + '\"',\r\n        \r\n//         // 3. reduced the temperature a little for better consistency (optional)\r\n//         temperature: 0.6,\r\n//     });\r\n// }\r\n// console.log(completion().data.choices[0].text)\r\n\r\n\r\nconst body = document.querySelector(\"body\");\r\n\r\nfunction getTextNodeList(dom){\r\n    let index = 0\r\n    const NodeList = []\r\n    const NodeOfWeb = []\r\n    NodeList.push(dom)\r\n    while(NodeList.length > 0){\r\n        const current_node = NodeList[0]\r\n        NodeList.shift()\r\n        if(current_node.outerHTML){\r\n            if(current_node.outerHTML.match(/^<code[^><]*?>[\\s\\S]+<\\/code>$/)){\r\n            }\r\n            else if(current_node.children.length == 0){ //node has no element child\r\n                if((current_node.innerText != null)){\r\n                    if(current_node.childNodes.length>0){ //node contains #text\r\n                        NodeOfWeb.push(current_node.firstChild)\r\n                    }\r\n                    else{ //node is an #text its self\r\n                        NodeOfWeb.push(current_node)\r\n                    }\r\n                }\r\n                \r\n            }\r\n            else{\r\n                current_node.childNodes.forEach(element => {\r\n                    NodeList.push(element)\r\n                });\r\n            }\r\n        }\r\n        else{\r\n            if((!current_node.nodeValue.match(/^[\\s\\t\\n\\r\\f\\v]+$/))){ \r\n                \r\n                NodeOfWeb.push(current_node)\r\n            }\r\n        }\r\n    }\r\n    return NodeOfWeb\r\n\r\n}\r\nfunction translateNodeList(list){\r\n    let index = 0\r\n    let wordCount = 0\r\n    let content = []\r\n    list.forEach(element => {\r\n        if(element.nodeValue == \"\"){\r\n            console.log(element)\r\n        }\r\n        wordCount+= String(element.nodeValue).length\r\n        if(wordCount > 600){\r\n            wordCount = 0\r\n            console.log(content.join(\"\\n\"))\r\n            replaceTranslatedNodes(translatingRequest(content), list)\r\n            content = []\r\n        }\r\n\r\n        content.push(String(element.nodeValue))\r\n\r\n    });\r\n    // index++\r\n    // current_node.firstChild.nodeValue = index\r\n}\r\nasync function translatingRequest(content){\r\n    /* do openai api */\r\n    translate = \"\"\r\n    \r\n    \r\n}\r\nfunction replaceTranslatedNodes(content, nodeList){\r\n    /*將翻譯完的字串放進來，轉為陣列後再對照回原本的nodeList*/\r\n}\r\n// `document.querySelector` may return null if the selector doesn't match anything.\r\nif (body) {\r\n\r\n    const NodeList = getTextNodeList(body)\r\n    translateNodeList(NodeList)\r\n\r\n\r\n}\r\ndebugger\r\n\r\n/*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*/"],"names":[],"sourceRoot":""}